[[plugins]]
repo = 'w0ng/vim-hybrid'
[[plugins]]
repo = 'kannokanno/previm'
hook_add = """
  let g:previm_open_cmd = 'open -a "Google Chrome"'
  let g:previm_show_header = 0
"""
[[plugins]]
repo = 'tpope/vim-fugitive'
[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = """
  set laststatus=2
  let g:lightline = {
          \ 'mode_map': {'c': 'NORMAL'},
          \ 'active': {
          \   'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'filename' ] ],
          \   'right': [ ['datetime'] , [ 'percent', 'lineinfo' ], [ 'fileformat', 'fileencoding', 'filetype' ] ]
          \ },
          \ 'component_function': {
          \   'modified': 'MyModified',
          \   'readonly': 'MyReadonly',
          \   'fugitive': 'MyFugitive',
          \   'filename': 'MyFilename',
          \   'fileformat': 'MyFileformat',
          \   'filetype': 'MyFiletype',
          \   'fileencoding': 'MyFileencoding',
          \   'mode': 'MyMode',
          \   'datetime': 'MyDatetime'
          \ }
          \ }
  let g:lightline.colorscheme = 'Tomorrow_Night'

  function! MyModified()
    return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
  endfunction

  function! MyReadonly()
    return &ft !~? 'help\|vimfiler\|gundo' && &readonly ? 'x' : ''
  endfunction

  function! MyFilename()
    return ('' != MyReadonly() ? MyReadonly() . ' ' : '') .
          \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
          \  &ft == 'unite' ? unite#get_status_string() :
          \  &ft == 'vimshell' ? vimshell#get_status_string() :
          \ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
          \ ('' != MyModified() ? ' ' . MyModified() : '')
  endfunction

  function! MyFugitive()
    try
      if &ft !~? 'vimfiler\|gundo' && exists('*fugitive#head')
        return fugitive#head()
      endif
    catch
    endtry
    return ''
  endfunction

  function! MyFileformat()
    return winwidth(0) > 70 ? &fileformat : ''
  endfunction

  function! MyFiletype()
    return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
  endfunction

  function! MyFileencoding()
    return winwidth(0) > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''
  endfunction

  function! MyMode()
    return winwidth(0) > 60 ? lightline#mode() : ''
  endfunction

  function! MyDatetime()
    return winwidth(0) > 60 ? strftime("%F %T") : ''
  endfunction
"""
[[plugins]]
repo = 'tpope/vim-surround'
[[plugins]]
repo = 'tyru/caw.vim'
hook_add = """
  nmap <C-_> <Plug>(caw:hatpos:toggle)
  vmap <C-_> <Plug>(caw:hatpos:toggle)
"""
[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = """
  let g:quickrun_config={
  \   '_': {
  \     'runner': 'vimproc',
  \     "runner/vimproc/updatetime" : 10,
  \     'split': ':botright',
  \     'into': 1
  \   }
  \}
"""
[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'
[[plugins]]
repo = 'dhruvasagar/vim-table-mode'
hook_add = "let g:table_mode_corner='|'"
[[plugins]]
repo = 'google/vim-searchindex'

[[plugins]]
repo = 'inkarkat/vim-SyntaxRange'

[[plugins]]
repo = 'w0rp/ale'
hook_add = """
  let g:ale_sign_column_always = 1
  let g:ale_fixers = ['textlint']
  let g:ale_linter_aliases = {'ps1': 'powershell'}
"""
[[plugins]]
repo = 'embear/vim-localvimrc'
hook_add = """
  let g:localvimrc_ask = 0
  let g:localvimrc_persistent = 2
"""
[[plugins]]
repo = 'neoclide/coc.nvim'
rev = 'release'
